[[Rules-Create-Java-Queries]]
=== Java syntax: Creating queries


==== Query for all frames of some Model

[source,java]
----
Query.find(FileModel.class).as("result")
----

==== Query by property

[source,java]
----
Query.find(FileModel.class)
    .withProperty(FileModel.PROPERTY_IS_DIRECTORY, true)
    .as("res")
----

==== Gremlin query

[source,java]
----
code,java
Query.find(FileModel.class).piped(new QueryGremlinCriterion() {
    public void query( GraphRewrite event, GremlinPipeline<Vertex, Vertex> pipeline ) {
       ...
    }
})
.withProperty(FileModel.PROPERTY_IS_DIRECTORY, true)
.as("res")
----

==== Custom query

The `Query` API is just a convenience implementation. For a custom
query, implement your own `GraphCondition`:

[source,java]
----
.when(
    new GraphCondition() {
        public boolean evaluate( GraphRewrite event, EvaluationContext context ) {
            event.getGraphContext(); //...
        }
    }
)
----


==== Combining Query API and Gremlin Pipelines 

[source,java]
----
    @Override
    public boolean evaluate(GraphRewrite event, EvaluationContext context)
    {
        QueryBuilderFind q = Query.fromType(InlineHintModel.class);
        if (StringUtils.isNotBlank(filename))
        {
            q.piped(new QueryGremlinCriterion()
            {
                private static final String HINT_STEP = "hintModel";

                @Override
                public void query(GraphRewrite event, GremlinPipeline<Vertex, Vertex> pipeline)
                {
                    pipeline.as(HINT_STEP);
                    pipeline.out(InlineHintModel.FILE_MODEL);
                    pipeline.has(FileModel.FILE_NAME, filename);
                    pipeline.back(HINT_STEP);
                }
            });
        }
        q.withProperty(InlineHintModel.HINT, QueryPropertyComparisonType.REGEX, messagePattern);

        return q.evaluate(event, context);
    }
----
