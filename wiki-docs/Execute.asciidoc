:ProductName: Windup
:ProductShortName: Windup
:ProductHomeVar: WINDUP_HOME 

[[Execute]]
=== Execute {ProductName}

[[overview]]
==== Overview 

These instructions use the replaceable variable `{ProductHomeVar}` to refer to the fully qualified path to your {ProductShortName} installation. For more information, see link:About-the-HOME-Variable[About the {ProductHomeVar} Variable].

[[run-windup]]
==== Run {ProductShortName}  

. Open a terminal and navigate to the {ProductHomeVar} directory. 
. The command to run {ProductShortName} uses the following syntax.
+
[options="nowrap"]
----
For Linux:     $ bin/windup --input INPUT_ARCHIVE --output OUTPUT_REPORT --packages PACKAGE_1 PACKAGE_2 PACKAGE_N
For Windows:   > bin\windup.bat --input INPUT_ARCHIVE --output OUTPUT_REPORT --packages PACKAGE_1 PACKAGE_2 PACKAGE_N
----

. This command takes arbitrary options processed by different add-ons. The list of options in the core {ProductShortName} distribution can be found in the http://windup.github.io/windup/docs/latest/javadoc/org/jboss/windup/config/ConfigurationOption.html[Javadoc]. Most commonly used command line arguments are:

+
--input *INPUT_ARCHIVE_OR_FOLDER*:: This is the fully qualified path of the application archive or folder you plan to migrate.
+
--output *OUTPUT_REPORT_DIRECTORY* (optional):: This is the fully qualified path to the folder that will contain the the report information produced by {ProductShortName}. 
+
* If omitted, the report will be generated in a  *INPUT_ARCHIVE_OR_FOLDER.report* folder. 
* If the output directory exists, you will see the following error. 
+
----
***ERROR*** Files exist in /home/username/OUTPUT_REPORT_DIRECTORY, but --overwrite not specified. Aborting!
----
+
You must specify the `--overwrite` argument to proceed. This forces {ProductShortName} to delete and recreate the folder.
+
[WARNING]
====
Be careful not to specify a report output directory that contains important information!
====
+
--exportCSV (optional):: Export the report data to a CSV formatted file on your local file system. {ProductShortName} creates the file in the folder specified by the `--output` argument. The CSV file can be imported into your favorite spreadsheet program for data manipulation and analysis. For details, see link:Export-the-Report-for-Use-by-Spreadsheet-Programs[Export the Report for Use by Spreadsheet Programs].
+
--source (optional):: One or more source technologies, servers, platforms, or frameworks to migrate from. 
+
[TIP]
====
For the list of the available `--source` servers or frameworks, use the `--listSourceTechnologies` argument on the `windup` command line as in the following example.
[options="nowrap"]
----
bin/windup --listSourceTechnologies
----
====
+
--target:: One or more source technologies, servers, platforms, or frameworks to migrate to. If you do not make this selection, interactive mode will prompt you for a choice.
+
[TIP]
====
For the list of the available `--target` servers or frameworks, use the `--listTargetTechnologies` argument on the `windup` command line as in the following example.
[options="nowrap"]
----
bin/windup --listTargetTechnologies
----
====
+
--overwrite (optional):: Specify this optional argument only if you are certain you want to force {ProductShortName} to delete the existing *OUTPUT_REPORT_DIRECTORY* folder. The default value is `false`.
+
--batchMode (optional):: Specifies that Windup should be run in a non-interactive mode that will not prompt for anything. This will take the default values for any parameters not passed in via the command line. The default value is 'false'.
+
--updateRulesets (optional):: Update the core rulesets distributed with {ProductShortName}. First, it checks for an existence of newer release, and if found, replaces the current rulesets directory with the new one.
+
[TIP]
====
To update the rulesets without analyzing an application, pass only this argument on the `windup` command line as in the following example.
[options="nowrap"]
----
bin/windup --updateRulesets
----
====
+
--userRulesDirectory (optional):: The fully qualified path to a user directory containing custom XML rules that should be loaded and executed by {ProductShortName}. The XML ruleset files must use one of the following extensions:  [x-]`*.windup.groovy` or [x-]`*.windup.xml`.
+
--packages *PACKAGE_1*, *PACKAGE_2*, *PACKAGE_N* (optional):: This is a comma-delimited list of the packages to be evaluated by {ProductShortName}.
+
* In most cases, you are interested only in evaluating the custom application class packages and not the standard Java EE or 3rd party packages. For example, if the _MyCustomApp_ application uses the package `com.mycustomapp`, you provide that package using the `--packages` argument on the command line. 
* It is not necessary to provide the standard Java EE packages, like `java.util` or `javax.ejb`. 
* While you can provide package names for standard Java EE 3rd party software like `org.apache`, it is usually best not to include them as they should not impact the migration effort.
+
WARNING: If you omit the `--packages` argument, every package in the application is scanned, resulting in very slow performance. It is best to provide the argument with one or more packages.

+
--excludePackages *PACKAGE_1*, *PACKAGE_2*, *PACKAGE_N* (optional):: This is a comma-delimited list of the packages to be excluded by {ProductShortName}.
+
--sourceMode (optional):: This argument is optional and is only required if the application to be evaluated contains source files rather than compiled binaries. The default value is `false`.

+
--additionalClasspath JAR_OR_DIRECTORY (optional):: This argument is optional and will add an additional jar to the classpath of the given application. This will assist in determining class reachability for the application itself. The parameter can be specified multiple times.

. To override the default _Fernflower_ decompiler, pass the `-Dwindup.decompiler` argument on the command line. For example, to use the _Procyon_ compiler, use the following syntax:
+
[options="nowrap"]
----
bin/windup -Dwindup.decompiler=procyon INPUT_ARCHIVE_OR_FOLDER --output OUTPUT_REPORT_DIRECTORY --packages PACKAGE_1 PACKAGE_2 PACKAGE_N 
----

. To evaluate an application archive, use the following syntax:
+
[options="nowrap"]
----
bin/windup --input INPUT_ARCHIVE_OR_FOLDER --output OUTPUT_REPORT_DIRECTORY --packages PACKAGE_1 PACKAGE_2 PACKAGE_N 
----
+
To run {ProductShortName} against application source code, you must add the `--sourceMode` argument:
+
[options="nowrap"]
----
bin/windup  --sourceMode --source SOURCE_TECHNOLOGY --target TARGET_TECHNOLOGY --input INPUT_ARCHIVE_OR_FOLDER --output OUTPUT_REPORT_DIRECTORY --packages PACKAGE_1 PACKAGE_2 PACKAGE_N 
----
+
See xref:command-examples[{ProductShortName} Command Examples] below for concrete examples of commands that use source code directories and archives located in the {ProductShortName} GitHub repository.

. You should see the following result upon completion of the command:
+
[options="nowrap"]
----
**SUCCESS*** Windup report created: PATH_TO_REPORTS/index.html
              Access it at this URL: file:///home/username/PATH_TO_REPORTS/index.html
----
+
WARNING: Depending on the size of the application and the hardware {ProductShortName} is running on, this command can take a very long time. For tips on how to improve performance, see link:Optimize-Performance[Optimize {ProductShortName} Performance].

.  Open the `OUTPUT_REPORT_DIRECTORY/index.html` file in a browser to access the report.
The following subdirectories in the `OUTPUT_REPORT_DIRECTORY` contain the supporting information for the report:

        OUTPUT_REPORT_DIRECTORY/
            graph/
            renderedGraph/
            reports/
            stats/
            index.html

. For details on how to evaluate the report data, see link:Review-the-Report[Review the Report].


==== {ProductShortName} Help

To see the complete list of available arguments for the `windup` command, open a terminal, navigate to the WINDUP_HOME directory, and execute the following command:

    bin/windup --help

[[command-examples]]
==== {ProductShortName} Command Examples

The following examples report against applications located in the {ProductShortName} source https://github.com/windup/windup/tree/master/test-files[test-files] directory.

===== Source Code Example

The following command runs against the https://github.com/windup/windup/tree/master/test-files/seam-booking-5.2[seam-booking-5.2] application source code. It evaluates all `org.jboss.seam` packages and creates a folder named 'seam-booking-report' in the `/home/username/windup-reports/` directory to contain the reporting output.

   bin/windup --sourceMode --input /home/username/windup-source/test-files/seam-booking-5.2/ --output /home/username/windup-reports/seam-booking-report --source spring --target eap --packages org.jboss.seam

===== Archive Example

The following command runs against the https://github.com/windup/windup/blob/master/test-files/jee-example-app-1.0.0.ear[jee-example-app-1.0.0.ear] EAR archive. It evaluates all `com.acme` and `org.apache` packages and creates a folder named 'jee-example-app-1.0.0.ear-report' in the `/home/username/windup-reports/` directory to contain the reporting output.

    bin/windup  --input /home/username/windup-source/test-files/jee-example-app-1.0.0.ear/ --output /home/username/windup-reports/jee-example-app-1.0.0.ear-report --source java-ee --target eap --packages com.acme org.apache


===== {ProductShortName} Quickstart Examples

For more concrete examples, see the {ProductShortName} quickstarts located on GitHub here: https://github.com/windup/windup-quickstarts. If you prefer, you can download the https://github.com/windup/windup-quickstarts/releases/[latest release] ZIP or TAR  distribution of the quickstarts.

The quickstarts provide examples of Java-based and XML-based rules you can run and test using {ProductShortName}. The README instructions provide a step-by-step guide to run the quickstart example. You can also look through the code examples and use them as a starting point for creating your own rules.

